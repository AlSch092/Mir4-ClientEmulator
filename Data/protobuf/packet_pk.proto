syntax = "proto3";

package MirMobile;

import "info_common.proto";

message CLIENT_GAME_PK_MODE {
    int32 pk_mode = 1;
}

message GAME_CLIENT_PK_MODE {
    uint32 result = 1;
    int32 pk_mode = 2;
}

message GAME_CLIENT_PK_ASSAULT {
    uint64 uid = 1;
    int32 assault = 2;
    int64 end_time = 3;
}

message GAME_CLIENT_PK_WINNER_RESULT {
    int32 pk_grade = 1;
    int32 pk_point = 2;
    _cost_info costinfo = 3;
    uint64 targetUid = 4;
}

message GAME_CLIENT_PK_LOSER_RESULT {
    _cost_info costinfo = 1;
    uint64 targetUid = 2;
    repeated _stack_item_info steal_item_info_list_ = 3;
    _time_ticket_info time_ticket_info = 4;
}

message GAME_CLIENT_PK_GRADE_UPDATE {
    uint64 uid = 1;
    int32 pk_grade = 2;
}

message GAME_CLIENT_PK_POINT {
    int32 pk_point = 1;
}

message CLIENT_GAME_PK_MODE_REQUEST {
    
}

message GAME_CLIENT_PK_MODE_REQUEST {
    int32 pk_mode = 1;
}

message CLIENT_GAME_PK_HISTORY_LIST {
    int32 history_page = 1;
}

message GAME_CLIENT_PK_HISTORY_LIST {
    uint32 result = 1;
    uint32 history_page = 2;
    uint32 max_num_per_page = 3;
    repeated _pk_history_info pk_history_info = 4;
    uint32 daily_kill_count = 5;
    uint32 daily_death_count = 6;
}

message CLIENT_GAME_PK_TRACEABLILITY_CHECK {
    uint64 event_time = 1;
    uint64 target_uid = 2;
    uint32 trace_type = 3;
}

message GAME_CLIENT_PK_TRACEABLILITY_CHECK {
    uint32 result = 1;
    uint32 target_stageid = 2;
    _vector3 target_position = 3;
}

message CLIENT_GAME_PK_OFFER_A_REWARD {
    uint64 event_time = 1;
    uint64 target_uid = 2;
    uint64 reward_cost = 3;
}

message GAME_CLIENT_PK_OFFER_A_REWARD {
    uint32 result = 1;
}

message CLIENT_GAME_PK_WANTED_LIST {
    uint32 list_type = 1;
    uint32 sort_type = 2;
    uint32 page_index = 3;
}

message GAME_CLIENT_PK_WANTED_LIST {
    uint32 result = 1;
    uint32 page_index = 2;
    repeated _pk_wanted_info wanted_list = 3;
}

message CLIENT_GAME_PK_WANTED_REGISTER {
    uint64 event_time = 1;
    uint64 wanted_user_uid = 2;
    uint32 wanted_prize_type = 3;
    uint64 wanted_prize = 4;
}

message GAME_CLIENT_PK_WANTED_REGISTER {
    uint32 result = 1;
    string nickname = 2;
    uint32 newregistered = 3;
    repeated _cost_info change_cost_list = 4;
}

message GAME_WORLD_PK_WANTED_REGISTER {
    uint64 account_uid = 1;
    uint64 character_uid = 2;
    uint64 event_time = 3;
    uint64 wanted_user_uid = 4;
    uint32 wanted_prize_type = 5;
    uint64 wanted_prize = 6;
    uint64 money_result_server = 7;
    uint64 fame_point = 8;
    repeated _used_cost_info change_cost_list = 9;
}

message WORLD_GAME_PK_WANTED_REGISTER {
    uint64 register_uid = 1;
    uint32 result = 2;
    uint64 wanted_uid = 3;
    uint64 character_uid = 4;
    string nickname = 5;
    uint64 total_prize = 6;
    uint64 wanted_end_time = 7;
    uint32 newregistered = 8;
    repeated _used_cost_info change_cost_list = 9;
    uint32 wanted_prize_type = 10;
    uint64 wanted_prize = 11;
}

message WORLD_GAME_PK_INFORM_WANTED_REGISTER {
    uint64 wanted_uid = 1;
    uint64 character_uid = 2;
    string nickname = 3;
    int32 cumulative_count = 4;
    uint64 prize_type = 5;
    uint64 total_prize = 6;
    uint64 wanted_end_time = 7;
}

message GAME_WORLD_PK_WANTED_CHARACTER {
    uint64 target_uid = 1;
    uint64 character_uid = 2;
}

message WORLD_GAME_PK_WANTED_CHARACTER {
    uint32 result = 1;
    uint64 character_uid = 2;
    uint64 target_uid = 3;
}

message GAME_WORLD_INFROM_PK_WANTED_CHARACTER {
    uint64 target_uid = 1;
    uint32 wanted_state = 2;
    uint32 end_type = 3;
}

message WORLD_GAME_INFROM_PK_WANTED_CHARACTER {
    uint64 target_uid = 1;
    uint32 wanted_state = 2;
    uint32 end_type = 3;
}

message GAME_CLIENT_PK_INFORM_MODIRY_WANTED_STATE {
    uint64 target_uid = 1;
    uint32 wanted_state = 2;
}

message GAME_CLIENT_DEATH_PENALTY_INFO {
    int32 steal_getobject_limit_count = 1;
    int32 steal_getobject_limit_max_count = 2;
    int32 exp_free_recovery_count = 3;
    int32 exp_free_recovery_maxcount = 4;
}

message CLIENT_GAME_DEATH_PENALTY_LIST {
    
}

message GAME_CLIENT_DEATH_PENALTY_LIST {
    repeated death_penalty_info death_penalty_list = 1;
}

message GAME_CLIENT_DEATH_PENALTY_ADD {
    death_penalty_info death_penalty_add = 1;
}

message GAME_CLIENT_DEATH_PENALTY_DEL {
    uint64 death_penalty_uid = 1;
}

message GAME_WORLD_DEATH_PENALTY_DEL {
    uint64 death_penalty_uid = 1;
    uint64 user_uid = 2;
}

message WORLD_GAME_DEATH_PENALTY_DEL {
    uint64 death_penalty_uid = 1;
    uint64 user_uid = 2;
}

message CLIENT_GAME_DEATH_PENALTY_GET_EXP {
    uint64 death_penalty_uid = 1;
    int32 recovery_type = 2;
}

message GAME_CLIENT_DEATH_PENALTY_GET_EXP {
    uint64 result = 1;
    uint64 death_penalty_uid = 2;
    int64 add_exp = 3;
    repeated _used_cost_info change_cost_list = 4;
    repeated _stack_item_info del_item_list = 5;
    int32 recovery_type = 6;
}

message GAME_WORLD_DEATH_PENALTY_DISABLED {
    uint64 death_penalty_uid = 1;
    uint64 user_uid = 2;
}

message WORLD_GAME_DEATH_PENALTY_DISABLED {
    uint64 death_penalty_uid = 1;
    uint64 user_uid = 2;
}

message GAME_CLIENT_DEATH_PENALTY_DISABLED {
    uint64 death_penalty_uid = 1;
}

message GAME_CLIENT_DEATH_PENALTY_RECOVERY_COMPLETED {
    uint64 death_penalty_uid = 1;
}

message CLIENT_GAME_DEATH_PENALTY_DEL {
    uint64 death_penalty_uid = 1;
}
