syntax = "proto3";

package MirMobile;

import "info_common.proto";

message warp_info {
    uint32 warp_stage_id = 1;
    _vector3 warp_pos = 2;
    int32 warp_method = 3;
    uint32 warp_arg = 4;
    uint32 warp_location_id = 5;
    repeated _cost_info warp_cost_list = 6;
    repeated _stack_item_info warp_item_list = 7;
    float warp_rotation = 8;
    repeated _dungeon_ticket_info warp_dungeon_ticket = 9;
    int32 warp_radius = 10;
}

message GAME_WORLD_DISCONNECT_USER {
    uint64 user_uid = 1;
}

message WORLD_GAME_REMOVE_USER {
    uint64 user_uid = 1;
    int32 reason = 2;
}

message GAME_WORLD_REQ_WAITING_ZONE_CASTING_WARP_CHECK {
    uint64 uid = 1;
    warp_info warp_info = 2;
    _casting_info casting_info = 3;
}

message WORLD_GAME_RES_WAITING_ZONE_CASTING_WARP_CHECK {
    uint64 uid = 1;
    uint64 zone_uid = 2;
    _casting_info casting_info = 3;
}

message CLIENT_GAME_WAITING_ZONE_WARP {
    uint64 uid = 1;
    uint32 location_id = 2;
    uint64 zone_uid = 3;
}

message GAME_WORLD_WAITING_ZONE_WARP {
    uint64 uid = 1;
    uint32 location_id = 2;
    uint64 zone_uid = 3;
}

message CLIENT_GAME_WARP_PORTAL {
    uint64 uid = 1;
    uint32 portal_id = 2;
}

message _packet_game_world_request_warp {
    uint64 uid = 1;
    warp_info warp_info = 2;
    uint64 casting_warp_zone_uid = 3;
}

message _packet_world_game_rep_try_warp {
    uint64 uid = 1;
    int32 result = 2;
    string gameserver_ip = 3;
    int32 gameserver_port = 4;
    uint64 zone_unique = 5;
    int32 zonegroup_index = 6;
    uint32 stage_id = 7;
    _vector3 loc = 8;
    uint32 warp_type = 9;
    uint32 warp_arg = 10;
    bool change_zone_group = 11;
}

message _packet_s_forced_warp_error {
    uint64 receive_user_id = 1;
    int32 error_id = 2;
}

message GAME_CLIENT_WARP_TO_ESCAPE_POS {
    uint64 uid = 1;
}

message _packet_game_world_warp_to_pos {
    uint64 uid = 1;
    warp_info warp_info = 2;
}

message CLIENT_GAME_WARP_USER {
    uint32 stage_id = 1;
    _vector3 loc = 2;
}

message _packet_world_game_request_prepare_warp {
    uint64 warp_user_uid = 1;
    warp_info warp_info = 2;
    int32 dest_world_server_zonegroup_index = 3;
    uint64 dest_zone_uid = 4;
}

message _packet_game_world_warp_prepare_result {
    bool result = 1;
    uint64 warp_user_uid = 2;
    warp_info warp_info = 3;
    int32 dest_world_server_zonegroup_index = 4;
    uint64 dest_zone_uid = 5;
}

message _packet_world_game_request_warp_ready {
    uint64 warp_user_account_uid = 1;
    uint64 warp_user_uid = 2;
    int32 dest_world_server_zonegroup_index = 3;
    uint64 dest_zone_uid = 4;
    int32 depature_world_server_zonegroup_index = 5;
    warp_info warp_info = 6;
    int32 user_connected_proxy_server_type = 7;
    int32 user_connected_proxy_server_index = 8;
}

message _packet_game_world_warp_ready_result {
    uint64 warp_user_uid = 1;
    int32 depature_world_server_zonegroup_index = 2;
    warp_info warp_info = 3;
    _characterInfo char_info = 4;
}

message _packet_world_game_warp_start {
    uint64 warp_user_uid = 1;
    string gameserver_ip = 2;
    int32 gameserver_port = 3;
    uint64 warp_zone_unique = 4;
    int32 warp_zonegroup_index = 5;
    warp_info warp_info = 6;
}

message CLIENT_GAME_NOTIFY_WARP_READY {
    uint64 warp_user_uid = 1;
    int32 warp_user_connected_session_index = 2;
}

message _packet_world_game_notify_client_warp_start {
    uint64 warp_user_uid = 1;
    int32 warp_user_connected_session_index = 2;
}

message _packet_game_world_request_warp_end {
    uint64 warp_user_uid = 1;
    int64 user_time = 2;
}

message _packet_world_game_warp_end_result {
    uint64 warp_user_uid = 1;
    bool is_login = 2;
    int64 user_time = 3;
    _gameserver_sync_party_info party_info = 4;
}

message GAME_CLIENT_WARP_END {
    uint64 warp_user_uid = 1;
    int64 user_time = 2;
}

message _packet_world_game_request_login_ready {
    uint64 login_user_account_uid = 1;
    uint64 login_user_uid = 2;
    int32 dest_world_server_zonegroup_index = 3;
    uint64 dest_zone_uid = 4;
    warp_info warp_info = 5;
    int32 user_connected_proxy_server_type = 6;
    int32 user_connected_proxy_server_index = 7;
    string user_ip = 9;
    int32 login_user_world_id = 10;
    int32 class_id = 11;
    bool assassin_mode = 12;
    string assassin_name = 13;
}

message _packet_game_world_login_ready_result {
    uint64 login_user_uid = 1;
    warp_info warp_info = 2;
    uint32 error_id = 3;
}

message GAME_CLIENT_WARP_READY {
    string gameserver_ip = 1;
    int32 gameserver_port = 2;
    uint64 zone_unique = 3;
    uint32 stage_id = 5;
    _vector3 loc = 6;
    uint32 warp_arg = 7;
    int32 user_connected_gateway_server_index = 8;
    uint32 warp_location_id = 9;
    _characterInfo char_info = 10;
    repeated _cost_info warp_cost_list = 11;
    repeated _stack_item_info warp_item_list = 12;
    uint32 warp_method = 13;
    float warp_rotation = 14;
    bool is_same_stage_warp = 15;
    repeated _dungeon_ticket_info warp_dungeon_ticket = 16;
    bool pvp_enable = 17;
}

message _packet_world_game_request_warp_ready_same_zonegroup {
    uint64 warp_user_account_uid = 1;
    uint64 warp_user_uid = 2;
    int32 dest_world_server_zonegroup_index = 3;
    uint64 dest_zone_uid = 4;
    warp_info warp_info = 5;
}

message GAME_CLIENT_WARP_FAIL {
    uint64 warp_user_uid = 1;
    int32 fail_reason = 2;
}

message _packet_game_world_connect_client_session_success {
    uint64 warp_user_uid = 1;
}

message _packet_client_game_warp_way_point {
    uint64 warp_user_uid = 1;
    uint32 way_point_index = 2;
}

message _packet_client_game_warp_direct_point {
    uint64 warp_user_uid = 1;
    uint32 stage_id = 2;
    _vector3 warp_location = 3;
}

message WORLD_GATEWAY_REQUEST_LOGIN_READY {
    uint64 account_uid = 1;
    uint64 login_user_uid = 2;
    int32 zonegroup_index = 3;
    uint64 zone_unique = 4;
    uint32 stage_id = 5;
    int32 gameserver_index = 6;
    int32 gameserver_zonegroup_index = 7;
    int32 account_grade = 8;
    int32 store_type = 9;
    bool assassin_mode = 10;
}

message GATEWAY_WORLD_LOGIN_READY_RESULT {
    uint32 result = 1;
    uint64 login_user_uid = 2;
}

message WORLD_GATEWAY_REQUEST_WARP_READY {
    uint64 warp_user_uid = 1;
    uint64 warp_zone_unique = 4;
    int32 warp_zonegroup_index = 5;
    warp_info warp_info = 6;
    _characterInfo char_info = 7;
    int32 gameserver_index = 8;
    int32 gameserver_zonegroup_index = 9;
    int32 gatewayserver_index = 10;
    uint64 depature_zone_uid = 11;
    bool pvp_enable = 12;
}

message GAME_WORLD_REQUEST_EVENT_BOSS_WARP {
    uint64 uid = 1;
    uint32 event_boss_id = 2;
    warp_info warp_info = 3;
    uint32 exec_type = 4;
    uint64 zone_uid = 5;
}

message WORLD_GAME_POST_WARP_READY {
    uint64 warp_user_uid = 1;
    _gameserver_sync_hunting_squad_info hunting_squad_info = 2;
    _gameserver_sync_secret_dungeon_exit_time secret_dungeon_exit_time = 3;
    _gameserver_sync_magic_square_exit_time magic_square_exit_time = 4;
}

message WORLD_CLIENT_POST_WARP_END {
    
}

message WORLD_GAME_CHEAT_GO_TO_OTHERUSER {
    uint64 user_uid = 1;
    uint64 target_user_uid = 2;
}

message GAME_WORLD_CHEAT_GO_TO_OTHERUSER {
    uint64 user_uid = 1;
    uint64 target_user_uid = 2;
    _vector3 target_pos = 3;
}

message CLIENT_GAME_WARP_TO_ESCAPE_POS {
    
}

message GAME_WORLD_WARP_TO_ESCAPE_POS {
    
}

message warp_register_info {
    uint64 user_uid = 1;
    uint64 dest_zone_uid = 2;
    uint32 dest_world_server_zonegroup_index = 3;
    warp_info warp_info = 4;
}

message warp_cache_data {
    repeated bytes user_data = 1;
}

message GAME_CACHEDATA_REQUEST_DATA_REGISTER {
    warp_register_info warp_data = 1;
    warp_cache_data cache_data = 2;
}

message GAME_CACHEDATA_RESPONSE_DATA_REGISTER {
    warp_register_info warp_data = 1;
}

message warp_get_info {
    uint64 user_uid = 1;
    uint64 account_uid = 2;
    int32 cur_worker_index = 3;
    uint64 dest_zone_uid = 4;
    int32 depature_world_server_zone_group_index = 5;
    int32 user_connected_proxy_server_type = 6;
    int32 user_connected_proxy_server_index = 7;
    warp_info warp_info = 8;
}

message GAME_CACHEDATA_REQUEST_DATA_GET {
    warp_get_info warp_data = 1;
}

message GAME_CACHEDATA_RESPONSE_DATA_GET {
    warp_get_info warp_data = 1;
    warp_cache_data cache_data = 2;
}

message CLIENT_GAME_WARP_STATE_CHECK {
    uint64 user_uid = 1;
}

message CLIENT_GAME_EMERGENCY_WARP {
    
}

message GAME_CLIENT_RETURN_POSITION {
    _vector3 loc = 1;
    float degree = 2;
}

message CLIENT_GAME_WARP_USER_STATE {
    
}

message GAME_CLIENT_WARP_USER_STATE {
    bool is_retry = 1;
}
